[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/addScrollMessToResTable/index.js",
    "content": "import getJquery from './../utilities/getJquery';\n\nfunction displayResTableHeading(parentEle, displayMessage) {\n  setTimeout(() => {\n    const parentEleSafe =\n      parentEle === undefined ? document.getElementsByTagName('BODY')[0] : parentEle;\n    // console.log('parentEleSafe: ', parentEleSafe);\n    getJquery().then(($) => {\n      $(parentEleSafe)\n        .find('.table-responsive[bse-resTableMess]')\n        .each((index, tableWrapperElement) => {\n          // console.log(tableWrapperElement);\n          $(tableWrapperElement).each(() => {\n            // console.log($(tableWrapperElement));\n            const tableWrapperWidth = $(tableWrapperElement).width();\n            const tableWidth = $(tableWrapperElement)\n              .find('table')\n              .width();\n            // console.log(tableWrapperWidth);\n            // console.log(tableWidth);\n            const isMessageExist =\n              $(tableWrapperElement).siblings('.table-responsive-heading').length !== 0;\n            // console.log('isMessageExist: ', isMessageExist);\n            if (\n              tableWrapperWidth !== 0 &&\n              tableWidth !== 0 &&\n              tableWidth > tableWrapperWidth &&\n              !isMessageExist\n            ) {\n              $(`<p class=\"table-responsive-heading\">${\n                displayMessage === undefined\n                  ? 'Scroll table horizontally to see more.'\n                  : displayMessage\n              }</p>`).insertBefore($(tableWrapperElement));\n            } else if (\n              tableWrapperWidth !== 0 &&\n              tableWidth !== 0 &&\n              tableWidth <= tableWrapperWidth &&\n              isMessageExist\n            ) {\n              $(tableWrapperElement)\n                .siblings('.table-responsive-heading')[0]\n                .remove();\n            }\n          });\n        });\n    });\n  }, 1);\n}\n\n/**\n * Add a message when the table in .table-responsive is scrollable.\n * Add bse-resTableMess attribute to div.table-responsive and run bse.addScrollMessToResTable.init();\n * @example\n * <div class=\"table-responsive\" bse-resTableMess>\n *   <table class=\"table\">\n *     <thead>\n *     </thead>\n *     <tbody>\n *     </tbody>\n *   </table>\n * </div>\n * bse.addScrollMessToResTable.init();\n * @param {string} displayMessage - Message that you want to display, default value is:\n * Scroll table horizontally to see more.\n */\nexport function init(displayMessage) {\n  displayResTableHeading(undefined, displayMessage);\n  getJquery().then(($) => {\n    $('.collapse').on('show.bs.collapse', () => {\n      const that = this;\n      displayResTableHeading(that, displayMessage);\n    });\n    $(window).on('hashchange', () => {\n      console.log('REGRESH');\n      displayResTableHeading(undefined, displayMessage);\n    });\n  });\n}\n\n// Force upate\nexport function update(displayMessage) {\n  displayResTableHeading(undefined, displayMessage);\n}\n",
    "static": true,
    "longname": "C:/Max/selflearn/npm/bootstrap-enhancement/src/addScrollMessToResTable/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "displayResTableHeading",
    "memberof": "src/addScrollMessToResTable/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/addScrollMessToResTable/index.js~displayResTableHeading",
    "access": "public",
    "export": false,
    "importPath": "bootstrap-enhancement/src/addScrollMessToResTable/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "parentEle",
        "types": [
          "*"
        ]
      },
      {
        "name": "displayMessage",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "function",
    "name": "init",
    "memberof": "src/addScrollMessToResTable/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/addScrollMessToResTable/index.js~init",
    "access": "public",
    "export": true,
    "importPath": "bootstrap-enhancement/src/addScrollMessToResTable/index.js",
    "importStyle": "{init}",
    "description": "Add a message when the table in .table-responsive is scrollable.\nAdd bse-resTableMess attribute to div.table-responsive and run bse.addScrollMessToResTable.init();",
    "examples": [
      "<div class=\"table-responsive\" bse-resTableMess>\n  <table class=\"table\">\n    <thead>\n    </thead>\n    <tbody>\n    </tbody>\n  </table>\n</div>\nbse.addScrollMessToResTable.init();"
    ],
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "displayMessage",
        "description": "Message that you want to display, default value is:\nScroll table horizontally to see more."
      }
    ],
    "return": null
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "update",
    "memberof": "src/addScrollMessToResTable/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/addScrollMessToResTable/index.js~update",
    "access": "public",
    "export": true,
    "importPath": "bootstrap-enhancement/src/addScrollMessToResTable/index.js",
    "importStyle": "{update}",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [
      {
        "name": "displayMessage",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 52,
    "kind": "file",
    "name": "src/fixModalShifting/index.js",
    "content": "import { addStyles, hasScrollBar } from '../utilities';\n\nfunction addStyleToFixModalShifting() {\n  if (hasScrollBar()) {\n    addStyles(`\n    body.modal-open {\n      padding-right: 15px;\n    }\n\n    // Fix fixed header jump to right issues\n    body.modal-open nav.affix {\n      right: 15px;\n    }\n  `);\n  }\n}\n\n/**\n * Fix bootstrap modal's shifting issue.\n * Run bse.fixModalShifting.init();\n * @example\n * bse.fixModalShifting.init();\n */\nexport function init() {\n  addStyleToFixModalShifting();\n}\n\nexport function update() {}\n",
    "static": true,
    "longname": "C:/Max/selflearn/npm/bootstrap-enhancement/src/fixModalShifting/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "addStyleToFixModalShifting",
    "memberof": "src/fixModalShifting/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/fixModalShifting/index.js~addStyleToFixModalShifting",
    "access": "public",
    "export": false,
    "importPath": "bootstrap-enhancement/src/fixModalShifting/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "init",
    "memberof": "src/fixModalShifting/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/fixModalShifting/index.js~init",
    "access": "public",
    "export": true,
    "importPath": "bootstrap-enhancement/src/fixModalShifting/index.js",
    "importStyle": "{init}",
    "description": "Fix bootstrap modal's shifting issue.\nRun bse.fixModalShifting.init();",
    "examples": [
      "bse.fixModalShifting.init();"
    ],
    "lineNumber": 24,
    "params": [],
    "return": null
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "update",
    "memberof": "src/fixModalShifting/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/fixModalShifting/index.js~update",
    "access": "public",
    "export": true,
    "importPath": "bootstrap-enhancement/src/fixModalShifting/index.js",
    "importStyle": "{update}",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "src/index.js",
    "content": "import * as utilities from './utilities/index';\nimport * as addScrollMessToResTable from './addScrollMessToResTable/index';\nimport * as fixModalShifting from './fixModalShifting/index';\nimport * as toggleCollapseChevron from './toggleCollapseChevron/index';\nimport * as scrollToTop from './scrollToTop/index';\nimport * as resList from './resList/index';\n\n/**\n * utilities\n */\nconst bse = {\n  utilities,\n  addScrollMessToResTable,\n  fixModalShifting,\n  toggleCollapseChevron,\n  scrollToTop,\n  resList,\n};\n\n/**\n * This is the main object that contains all methods\n * @type {Object}\n * @property {Object} bse.utilities\n * Utilityies related to bootstrap\n * @property {function(sel: Object, strClass: string)} bse.utilities.prependClass\n * Add class names to the left most position to avoid overwriting original class's style\n * @property {function():Promise<Object, MyError>} bse.utilities.getJquery\n * Must use this way to get jQuery if we want to attach something to bootstrap's event.\n * @property {function():boolean} bse.utilities.hasScrollBar\n * Check if the current page has scroll bar.\n * @property {function():number} bse.utilities.getScrollBarWidth\n * Get scroll bar's width.\n * @property {function(css: string)} bse.utilities.addStyles\n * Add some css styles to the top most position in head tag.\n * @property {Object} bse.utilities.checkBreakPoint\n * @property {function():string} bse.utilities.checkBreakPoint.checkSize\n * Get window width's info in bootstrap 4's grid system standards.\n * @property {function():boolean} bse.utilities.checkBreakPoint.is\n * Check which grid level is window in.\n * @property {function(keyValue: string, element: Object):Promise<Object, MyError>} bse.utilities.addToWindow\n * Attach object to window without overwriting anything else.\n *\n * @property {Object} bse.addScrollMessToResTable\n * Add a message when the table in .table-responsive is scrollable.\n * @property {function(displayMessage: string)} bse.addScrollMessToResTable.init\n * Init addScrollMessToResTable\n * @property {function(displayMessage: string)} bse.addScrollMessToResTable.update\n * Update addScrollMessToResTable\n *\n * @property {Object} bse.fixModalShifting\n * Fix bootstrap modal's shifting issue.\n * @property {function()} bse.fixModalShifting.init\n * Init fixModalShifting\n *\n * @property {Object} bse.toggleCollapseChevron\n * Automatically toggle bootstrap collapse's chevron based on show or hide collapse.\n * @property {function()} bse.toggleCollapseChevron.init\n * Init toggleCollapseChevron\n *\n * @property {Object} bse.scrollToTop\n * Add scroll to top anchor on the right bottom of the whole page.\n * @property {function(innerElement: string)} bse.scrollToTop.init\n * Init scrollToTop\n *\n * @property {Object} bse.resList\n * Convert a ul li menu to a select options element and display it on small device\n * @property {function(config: Object)} bse.resList.init\n * Init resList\n */\nexport default bse;\n\nutilities.addToWindow('bse', bse);\n",
    "static": true,
    "longname": "C:/Max/selflearn/npm/bootstrap-enhancement/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "bse",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~bse",
    "access": "public",
    "export": true,
    "importPath": "bootstrap-enhancement/src/index.js",
    "importStyle": "bse",
    "description": "This is the main object that contains all methods",
    "lineNumber": 11,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bse.utilities",
        "description": "Utilityies related to bootstrap"
      },
      {
        "nullable": null,
        "types": [
          "function(sel: Object, strClass: string)"
        ],
        "spread": false,
        "optional": false,
        "name": "bse.utilities.prependClass",
        "description": "Add class names to the left most position to avoid overwriting original class's style"
      },
      {
        "nullable": null,
        "types": [
          "function():Promise<Object, MyError>"
        ],
        "spread": false,
        "optional": false,
        "name": "bse.utilities.getJquery",
        "description": "Must use this way to get jQuery if we want to attach something to bootstrap's event."
      },
      {
        "nullable": null,
        "types": [
          "function():boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bse.utilities.hasScrollBar",
        "description": "Check if the current page has scroll bar."
      },
      {
        "nullable": null,
        "types": [
          "function():number"
        ],
        "spread": false,
        "optional": false,
        "name": "bse.utilities.getScrollBarWidth",
        "description": "Get scroll bar's width."
      },
      {
        "nullable": null,
        "types": [
          "function(css: string)"
        ],
        "spread": false,
        "optional": false,
        "name": "bse.utilities.addStyles",
        "description": "Add some css styles to the top most position in head tag."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bse.utilities.checkBreakPoint",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function():string"
        ],
        "spread": false,
        "optional": false,
        "name": "bse.utilities.checkBreakPoint.checkSize",
        "description": "Get window width's info in bootstrap 4's grid system standards."
      },
      {
        "nullable": null,
        "types": [
          "function():boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bse.utilities.checkBreakPoint.is",
        "description": "Check which grid level is window in."
      },
      {
        "nullable": null,
        "types": [
          "function(keyValue: string, element: Object):Promise<Object, MyError>"
        ],
        "spread": false,
        "optional": false,
        "name": "bse.utilities.addToWindow",
        "description": "Attach object to window without overwriting anything else."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bse.addScrollMessToResTable",
        "description": "Add a message when the table in .table-responsive is scrollable."
      },
      {
        "nullable": null,
        "types": [
          "function(displayMessage: string)"
        ],
        "spread": false,
        "optional": false,
        "name": "bse.addScrollMessToResTable.init",
        "description": "Init addScrollMessToResTable"
      },
      {
        "nullable": null,
        "types": [
          "function(displayMessage: string)"
        ],
        "spread": false,
        "optional": false,
        "name": "bse.addScrollMessToResTable.update",
        "description": "Update addScrollMessToResTable"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bse.fixModalShifting",
        "description": "Fix bootstrap modal's shifting issue."
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "bse.fixModalShifting.init",
        "description": "Init fixModalShifting"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bse.toggleCollapseChevron",
        "description": "Automatically toggle bootstrap collapse's chevron based on show or hide collapse."
      },
      {
        "nullable": null,
        "types": [
          "function()"
        ],
        "spread": false,
        "optional": false,
        "name": "bse.toggleCollapseChevron.init",
        "description": "Init toggleCollapseChevron"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bse.scrollToTop",
        "description": "Add scroll to top anchor on the right bottom of the whole page."
      },
      {
        "nullable": null,
        "types": [
          "function(innerElement: string)"
        ],
        "spread": false,
        "optional": false,
        "name": "bse.scrollToTop.init",
        "description": "Init scrollToTop"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bse.resList",
        "description": "Convert a ul li menu to a select options element and display it on small device"
      },
      {
        "nullable": null,
        "types": [
          "function(config: Object)"
        ],
        "spread": false,
        "optional": false,
        "name": "bse.resList.init",
        "description": "Init resList"
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "src/resList/index.js",
    "content": "import getJquery from './../utilities/getJquery';\nimport { prependClass } from '../utilities/index';\n\nfunction convertListToDropdown(config = {}) {\n  getJquery().then(($) => {\n    // console.log(config);\n    const { breakPoint = 'lg', className } = config;\n    const windowUrl = window.location.href;\n    // console.log('windowUrl: ', windowUrl);\n    $('body')\n      .find('ul[bse-resList]')\n      .each((ulIndex, ulElement) => {\n        // Loop through all menus\n        prependClass(ulElement, `d-none d-${breakPoint}-flex`);\n        const isDropdownExist = $(ulElement).siblings('select').length !== 0;\n        if (isDropdownExist) {\n          // Update drop down list's select\n          const $dropDown = $($(ulElement).siblings('select')[0]);\n          $dropDown.find('option').each((optionIndex, optionElement) => {\n            const href = optionElement.value;\n            const isActived = windowUrl.indexOf(href) !== -1;\n            if (isActived) {\n              optionElement.selected = true;\n            } else {\n              optionElement.selected = false;\n            }\n            // console.log(optionElement.selected);\n            // console.log(optionElement.value);\n          });\n        } else {\n          // Crete new drop down list\n          const $dropDown = $('<select />', {\n            class: `d-${breakPoint}-none ${className}`,\n          });\n          $(ulElement)\n            .find('li')\n            .each((liIndex, liElement) => {\n              // console.log(liElement);\n              // console.log($(liElement).find('a'));\n              $(liElement)\n                .find('a')\n                .each((aIndex, aElement) => {\n                  const href = $(aElement).attr('href');\n                  const text = $(aElement).text();\n                  const isActived = windowUrl.indexOf(href) !== -1;\n                  const $option = $('<option />', {\n                    value: href,\n                    text,\n                    selected: isActived,\n                  });\n                  $option.appendTo($dropDown);\n                });\n            });\n          // console.log($dropDown);\n          $dropDown.insertAfter($(ulElement));\n          // Add navigate funcitonality to options\n          $dropDown.on('change', (event) => {\n            // console.log(event.currentTarget);\n            window.location = $(event.currentTarget)\n              .find('option:selected')\n              .val();\n          });\n        }\n      });\n  });\n}\n\n/**\n * Convert a ul li menu to a select options element and display it on small device\n * Add bse-resList attribute to ul and run bse.resList.init();\n * @example\n * <ul bse-resList>\n *   <li><a class=\"h7\" href=\"PASSENGER\">PASSENGER</a></li>\n *   <li><a class=\"h7\" href=\"TRUCK\">TRUCK</a></li>\n *   <li><a class=\"h7\" href=\"EARTHMOVER\">EARTHMOVER</a></li>\n *   <li><a class=\"h7\" href=\"AGRICULTURE\">AGRICULTURE</a></li>\n *   <li><a class=\"h7\" href=\"AVIATION\">AVIATION</a></li>\n *   <li><a class=\"h7\" href=\"2R\">2R</a></li>\n * </ul>\n * bse.resList.init();\n * @param {Object} config - Config object\n * @param {string} config.breakPoint - BreakPoint\n * @param {string} config.className - calss name that you want to add to select\n */\nexport function init(config) {\n  getJquery().then(($) => {\n    convertListToDropdown(config);\n    $(window).on('hashchange', () => {\n      convertListToDropdown(config);\n    });\n  });\n}\n\n// Force upate\nexport function update() {}\n",
    "static": true,
    "longname": "C:/Max/selflearn/npm/bootstrap-enhancement/src/resList/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "function",
    "name": "convertListToDropdown",
    "memberof": "src/resList/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/resList/index.js~convertListToDropdown",
    "access": "public",
    "export": false,
    "importPath": "bootstrap-enhancement/src/resList/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "function",
    "name": "init",
    "memberof": "src/resList/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/resList/index.js~init",
    "access": "public",
    "export": true,
    "importPath": "bootstrap-enhancement/src/resList/index.js",
    "importStyle": "{init}",
    "description": "Convert a ul li menu to a select options element and display it on small device\nAdd bse-resList attribute to ul and run bse.resList.init();",
    "examples": [
      "<ul bse-resList>\n  <li><a class=\"h7\" href=\"PASSENGER\">PASSENGER</a></li>\n  <li><a class=\"h7\" href=\"TRUCK\">TRUCK</a></li>\n  <li><a class=\"h7\" href=\"EARTHMOVER\">EARTHMOVER</a></li>\n  <li><a class=\"h7\" href=\"AGRICULTURE\">AGRICULTURE</a></li>\n  <li><a class=\"h7\" href=\"AVIATION\">AVIATION</a></li>\n  <li><a class=\"h7\" href=\"2R\">2R</a></li>\n</ul>\nbse.resList.init();"
    ],
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "Config object"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "config.breakPoint",
        "description": "BreakPoint"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "config.className",
        "description": "calss name that you want to add to select"
      }
    ],
    "return": null
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "update",
    "memberof": "src/resList/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/resList/index.js~update",
    "access": "public",
    "export": true,
    "importPath": "bootstrap-enhancement/src/resList/index.js",
    "importStyle": "{update}",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 62,
    "kind": "file",
    "name": "src/scrollToTop/index.js",
    "content": "import getJquery from './../utilities/getJquery';\nimport { addStyles } from '../utilities/index';\n\n/**\n * Add scroll to top anchor on the right bottom of the whole page.\n * @example\n * bse.scrollToTop.init(`<span class=\"fa-stack fa-lg\">\n *    <i class=\"fa fa-circle fa-stack-2x\"></i>\n *    <i class=\"fa fa-chevron-up fa-stack-1x fa-inverse\"></i>\n *  </span>`);\n * @param {string} innerElement - Dom element string that you want to add to that anchor.\n */\nexport function init(innerElement) {\n  getJquery().then(($) => {\n    addStyles(`\n    .scroll-to-top {\n      display: none;\n      position: fixed;\n      /*z-index should be smaller than .page-loading-spinner*/\n      z-index: 9998;\n      bottom: 5px;\n      right: 5px;\n      font-size: 15px;\n      filter: alpha(opacity=40); /* For IE8 and earlier */\n    \n    .scroll-to-top:hover {\n      cursor: pointer;\n      opacity: 0.8;\n      filter: alpha(opacity=80); /* For IE8 and earlier */\n    }\n      `);\n\n    const $scrollAnchor = $(`<a class=\"scroll-to-top\" href=\"\">${innerElement}</a>`);\n\n    $('body').append($scrollAnchor);\n\n    $(window).scroll(() => {\n      if ($(window).scrollTop() > 100) {\n        $scrollAnchor.fadeIn();\n      } else {\n        $scrollAnchor.fadeOut();\n      }\n    });\n\n    $scrollAnchor.click((e) => {\n      e.preventDefault();\n      $('body, html').animate(\n        {\n          scrollTop: 0,\n        },\n        800,\n      );\n    });\n  });\n}\n\nexport function update() {}\n",
    "static": true,
    "longname": "C:/Max/selflearn/npm/bootstrap-enhancement/src/scrollToTop/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "init",
    "memberof": "src/scrollToTop/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/scrollToTop/index.js~init",
    "access": "public",
    "export": true,
    "importPath": "bootstrap-enhancement/src/scrollToTop/index.js",
    "importStyle": "{init}",
    "description": "Add scroll to top anchor on the right bottom of the whole page.",
    "examples": [
      "bse.scrollToTop.init(`<span class=\"fa-stack fa-lg\">\n   <i class=\"fa fa-circle fa-stack-2x\"></i>\n   <i class=\"fa fa-chevron-up fa-stack-1x fa-inverse\"></i>\n </span>`);"
    ],
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "innerElement",
        "description": "Dom element string that you want to add to that anchor."
      }
    ],
    "return": null
  },
  {
    "__docId__": 64,
    "kind": "function",
    "name": "update",
    "memberof": "src/scrollToTop/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/scrollToTop/index.js~update",
    "access": "public",
    "export": true,
    "importPath": "bootstrap-enhancement/src/scrollToTop/index.js",
    "importStyle": "{update}",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "src/toggleCollapseChevron/index.js",
    "content": "import { getJquery } from '../utilities/index';\n/**\n * Automatically toggle bootstrap collapse's chevron based on show or hide collapse.\n * Add bse-toggleCollapChevron attribute to chevron link and run bse.toggleCollapseChevron.init();\n * @example\n * <a data-toggle=\"collapse\" href=\"#test\">\n *   <i class=\"fas fa-chevron-down\" bse-toggleCollapChevron></i>\n * </a>\n * bse.toggleCollapseChevron.init();\n */\nexport function init() {\n  getJquery()\n    .then(($) => {\n      $('.collapse').on('show.bs.collapse', (event) => {\n        // console.log('show.bs.collapse');\n        // console.log(event);\n        // console.log(event.currentTarget);\n        const $chevronIcon = $(document)\n          .find(`[href='#${$(event.target).attr('id')}']`)\n          .find('svg[bse-toggleCollapChevron]');\n        // console.log($chevronIcon);\n        $chevronIcon.attr('data-icon', 'chevron-up');\n        // $(`#${this.id}-chevron`).toggleClass('fa-chevron-down fa-chevron-up');\n        // $(`#${this.id}-hvr`).toggleClass('hvr-icon-hang hvr-icon-bob');\n      });\n      $('.collapse').on('hide.bs.collapse', (event) => {\n        const $chevronIcon = $(document)\n          .find(`[href='#${$(event.target).attr('id')}']`)\n          .find('svg[bse]');\n        $chevronIcon.attr('data-icon', 'chevron-down');\n      });\n    })\n    .catch((e) => {\n      console.error(e);\n    });\n}\n\nexport function update() {}\n",
    "static": true,
    "longname": "C:/Max/selflearn/npm/bootstrap-enhancement/src/toggleCollapseChevron/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "function",
    "name": "init",
    "memberof": "src/toggleCollapseChevron/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/toggleCollapseChevron/index.js~init",
    "access": "public",
    "export": true,
    "importPath": "bootstrap-enhancement/src/toggleCollapseChevron/index.js",
    "importStyle": "{init}",
    "description": "Automatically toggle bootstrap collapse's chevron based on show or hide collapse.\nAdd bse-toggleCollapChevron attribute to chevron link and run bse.toggleCollapseChevron.init();",
    "examples": [
      "<a data-toggle=\"collapse\" href=\"#test\">\n  <i class=\"fas fa-chevron-down\" bse-toggleCollapChevron></i>\n</a>\nbse.toggleCollapseChevron.init();"
    ],
    "lineNumber": 11,
    "params": [],
    "return": null
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "update",
    "memberof": "src/toggleCollapseChevron/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/toggleCollapseChevron/index.js~update",
    "access": "public",
    "export": true,
    "importPath": "bootstrap-enhancement/src/toggleCollapseChevron/index.js",
    "importStyle": "{update}",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 68,
    "kind": "file",
    "name": "src/utilities/addStyles.js",
    "content": "/**\n * Add some css styles to the top most position in head tag.\n * @example\n * bse.utilities.addStyles('.test{color: red}');\n * @param {string} css - Css styles that you want to add.\n */\nexport default function addStyles(css) {\n  const head = document.head || document.getElementsByTagName('head')[0];\n  const style = document.createElement('style');\n\n  style.type = 'text/css';\n  // Polyfill IE8 and below\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n\n  head.insertBefore(style, head.childNodes[0]);\n}\n",
    "static": true,
    "longname": "C:/Max/selflearn/npm/bootstrap-enhancement/src/utilities/addStyles.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "addStyles",
    "memberof": "src/utilities/addStyles.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities/addStyles.js~addStyles",
    "access": "public",
    "export": true,
    "importPath": "bootstrap-enhancement/src/utilities/addStyles.js",
    "importStyle": "addStyles",
    "description": "Add some css styles to the top most position in head tag.",
    "examples": [
      "bse.utilities.addStyles('.test{color: red}');"
    ],
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "css",
        "description": "Css styles that you want to add."
      }
    ],
    "return": null
  },
  {
    "__docId__": 70,
    "kind": "file",
    "name": "src/utilities/addToWindow.js",
    "content": "/**\n * Attach object to window without overwriting anything else.\n * @example\n * bse.utilities.addToWindow('bse', bse);\n * @param {string} keyValue - Keyword that you want use to get the object from window.\n * @param {Object} element - Dom element that you want to add to window.\n * @return {Promise<Object, MyError>} Promise object.\n */\nexport default function addToWindow(keyValue, element) {\n  return new Promise((resolve, reject) => {\n    // console.log(window[keyValue]);\n    if (typeof window !== 'undefined') {\n      if (typeof window[keyValue] === 'undefined') {\n        window[keyValue] = element;\n        window[keyValue].bseLoaded = true;\n      } else if (typeof window[keyValue].bseLoaded === 'undefined' || !window[keyValue].bseLoaded) {\n        console.error(`'${keyValue}' has been used on window object.`);\n        reject(new Error(`'${keyValue}' has been used on window object.`));\n      }\n    } else {\n      console.error('Cannot get window object');\n      reject(new Error('Cannot get window object'));\n    }\n    resolve();\n  });\n}\n",
    "static": true,
    "longname": "C:/Max/selflearn/npm/bootstrap-enhancement/src/utilities/addToWindow.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "addToWindow",
    "memberof": "src/utilities/addToWindow.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities/addToWindow.js~addToWindow",
    "access": "public",
    "export": true,
    "importPath": "bootstrap-enhancement/src/utilities/addToWindow.js",
    "importStyle": "addToWindow",
    "description": "Attach object to window without overwriting anything else.",
    "examples": [
      "bse.utilities.addToWindow('bse', bse);"
    ],
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "keyValue",
        "description": "Keyword that you want use to get the object from window."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "Dom element that you want to add to window."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object, MyError>"
      ],
      "spread": false,
      "description": "Promise object."
    }
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "src/utilities/checkBreakPoint/checkSize.js",
    "content": "// TODO: Need to load jQuery properly.\n/**\n * Checks if the span is set to display lock via CSS\n */\nfunction checkIfBlock(target) {\n  const { $ } = window;\n  const isTargetBlcok = $(target).css('display') === 'block';\n  return isTargetBlcok;\n}\n\n/**\n * Get window width's info in bootstrap 4's grid system standards.\n * @example\n * const bsGrid = bse.utilities.checkBreakPoint.checkSize();\n * @return {string} bsGrid of current window\n */\nexport default function checkSize() {\n  const { $ } = window;\n  // Add some invisible elements with Bootstrap CSS visibile utility classes\n  const $testElement = $(\"<div style='display:none;' class='breakpoint-check'><span class='xs d-block d-sm-inline'></span><span class='sm d-sm-block d-md-inline'></span><span class='md d-md-block d-lg-inline'></span><span class='lg d-lg-block d-xl-inline'></span><span class='xl d-xl-block'></span></div>\");\n  $('body').append($testElement);\n  // Set some variables to use with the if checks below\n  const xs = checkIfBlock('.breakpoint-check .xs');\n  const md = checkIfBlock('.breakpoint-check .md');\n  const sm = checkIfBlock('.breakpoint-check .sm');\n  const lg = checkIfBlock('.breakpoint-check .lg');\n  const xl = checkIfBlock('.breakpoint-check .xl');\n  $testElement.remove();\n\n  // add the breakpoint to the console\n  if (xs === true) {\n    return 'xs';\n  }\n\n  if (sm === true) {\n    return 'sm';\n  }\n\n  if (md === true) {\n    return 'md';\n  }\n\n  if (lg === true) {\n    return 'lg';\n  }\n\n  if (xl === true) {\n    return 'xl';\n  }\n\n  return 'null';\n}\n",
    "static": true,
    "longname": "C:/Max/selflearn/npm/bootstrap-enhancement/src/utilities/checkBreakPoint/checkSize.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "checkIfBlock",
    "memberof": "src/utilities/checkBreakPoint/checkSize.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities/checkBreakPoint/checkSize.js~checkIfBlock",
    "access": "public",
    "export": false,
    "importPath": "bootstrap-enhancement/src/utilities/checkBreakPoint/checkSize.js",
    "importStyle": null,
    "description": "Checks if the span is set to display lock via CSS",
    "lineNumber": 5,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "checkSize",
    "memberof": "src/utilities/checkBreakPoint/checkSize.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities/checkBreakPoint/checkSize.js~checkSize",
    "access": "public",
    "export": true,
    "importPath": "bootstrap-enhancement/src/utilities/checkBreakPoint/checkSize.js",
    "importStyle": "checkSize",
    "description": "Get window width's info in bootstrap 4's grid system standards.",
    "examples": [
      "const bsGrid = bse.utilities.checkBreakPoint.checkSize();"
    ],
    "lineNumber": 17,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "bsGrid of current window"
    },
    "params": []
  },
  {
    "__docId__": 75,
    "kind": "file",
    "name": "src/utilities/checkBreakPoint/index.js",
    "content": "import checkSize from './checkSize';\nimport is from './is';\n\nexport { checkSize, is };\n",
    "static": true,
    "longname": "C:/Max/selflearn/npm/bootstrap-enhancement/src/utilities/checkBreakPoint/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 76,
    "kind": "file",
    "name": "src/utilities/checkBreakPoint/is.js",
    "content": "import checkSize from './checkSize';\n\nconst breakpointList = ['xs', 'sm', 'md', 'lg', 'xl'];\n\n/**\n * Determines whether passed string is a parsable expression\n */\nfunction isAnExpression(str) {\n  return str.charAt(0) === '<' || str.charAt(0) === '>';\n}\n\n/**\n * Returns true if currently active breakpoint matches the expression\n */\nfunction isAnyActive(acceptedBreakpoints) {\n  let found = false;\n  const currentBreakPpoint = checkSize();\n  acceptedBreakpoints.forEach((acceptedBreakpoint) => {\n    if (acceptedBreakpoint === currentBreakPpoint) {\n      found = true;\n    }\n  });\n  return found;\n}\n\n/**\n * Splits the expression in into <|> [=] alias\n */\nfunction splitExpression(str) {\n  // Used operator\n  const operator = str.charAt(0);\n  // Include breakpoint equal to alias?\n  const orEqual = str.charAt(1) === '=';\n\n  /**\n   * Index at which breakpoint name starts.\n   *\n   * For:  >sm, index = 1\n   * For: >=sm, index = 2\n   */\n  const index = 1 + (orEqual ? 1 : 0);\n\n  /**\n   * The remaining part of the expression, after the operator, will be treated as the\n   * breakpoint name to compare with\n   */\n  const breakpointName = str.slice(index);\n\n  return {\n    operator,\n    orEqual,\n    breakpointName,\n  };\n}\n\n/**\n * Determines whether current breakpoint matches the expression given\n */\nfunction isMatchingExpression(str) {\n  const expression = splitExpression(str);\n\n  // Get index of sought breakpoint in the list\n  const pos = breakpointList.indexOf(expression.breakpointName);\n\n  // Breakpoint found\n  if (pos !== -1) {\n    let start = 0;\n    let end = 0;\n\n    /**\n     * Parsing viewport.is('<=md') we interate from smallest breakpoint ('xs') and end\n     * at 'md' breakpoint, indicated in the expression,\n     * That makes: start = 0, end = 2 (index of 'md' breakpoint)\n     *\n     * Parsing viewport.is('<md') we start at index 'xs' breakpoint, and end at\n     * 'sm' breakpoint, one before 'md'.\n     * Which makes: start = 0, end = 1\n     */\n    if (expression.operator === '<') {\n      start = 0;\n      end = expression.orEqual ? pos + 1 : pos;\n    }\n    /**\n     * Parsing viewport.is('>=sm') we interate from breakpoint 'sm' and end at the end\n     * of breakpoint list.\n     * That makes: start = 1, end = undefined\n     *\n     * Parsing viewport.is('>sm') we start at breakpoint 'md' and end at the end of\n     * breakpoint list.\n     * Which makes: start = 2, end = undefined\n     */\n    if (expression.operator === '>') {\n      start = expression.orEqual ? pos : pos + 1;\n      end = undefined;\n    }\n\n    const acceptedBreakpoints = breakpointList.slice(start, end);\n    // console.log('acceptedBreakpoints: ', acceptedBreakpoints);\n\n    return isAnyActive(acceptedBreakpoints);\n  }\n  return false;\n}\n\n/**\n * Check which grid level is window in.\n * @example\n * const is = bse.utilities.checkBreakPoint.is('md');\n * @return {boolean} True when window is in the scope. False when window is not in the scope.\n */\nexport default function is(str) {\n  if (isAnExpression(str)) {\n    return isMatchingExpression(str);\n  }\n  return false;\n}\n",
    "static": true,
    "longname": "C:/Max/selflearn/npm/bootstrap-enhancement/src/utilities/checkBreakPoint/is.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "name": "breakpointList",
    "memberof": "src/utilities/checkBreakPoint/is.js",
    "static": true,
    "longname": "src/utilities/checkBreakPoint/is.js~breakpointList",
    "access": "public",
    "export": false,
    "importPath": "bootstrap-enhancement/src/utilities/checkBreakPoint/is.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "isAnExpression",
    "memberof": "src/utilities/checkBreakPoint/is.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities/checkBreakPoint/is.js~isAnExpression",
    "access": "public",
    "export": false,
    "importPath": "bootstrap-enhancement/src/utilities/checkBreakPoint/is.js",
    "importStyle": null,
    "description": "Determines whether passed string is a parsable expression",
    "lineNumber": 8,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "isAnyActive",
    "memberof": "src/utilities/checkBreakPoint/is.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities/checkBreakPoint/is.js~isAnyActive",
    "access": "public",
    "export": false,
    "importPath": "bootstrap-enhancement/src/utilities/checkBreakPoint/is.js",
    "importStyle": null,
    "description": "Returns true if currently active breakpoint matches the expression",
    "lineNumber": 15,
    "params": [
      {
        "name": "acceptedBreakpoints",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "splitExpression",
    "memberof": "src/utilities/checkBreakPoint/is.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities/checkBreakPoint/is.js~splitExpression",
    "access": "public",
    "export": false,
    "importPath": "bootstrap-enhancement/src/utilities/checkBreakPoint/is.js",
    "importStyle": null,
    "description": "Splits the expression in into <|> [=] alias",
    "lineNumber": 29,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"operator\": *, \"orEqual\": *, \"breakpointName\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "isMatchingExpression",
    "memberof": "src/utilities/checkBreakPoint/is.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities/checkBreakPoint/is.js~isMatchingExpression",
    "access": "public",
    "export": false,
    "importPath": "bootstrap-enhancement/src/utilities/checkBreakPoint/is.js",
    "importStyle": null,
    "description": "Determines whether current breakpoint matches the expression given",
    "lineNumber": 59,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "is",
    "memberof": "src/utilities/checkBreakPoint/is.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities/checkBreakPoint/is.js~is",
    "access": "public",
    "export": true,
    "importPath": "bootstrap-enhancement/src/utilities/checkBreakPoint/is.js",
    "importStyle": "is",
    "description": "Check which grid level is window in.",
    "examples": [
      "const is = bse.utilities.checkBreakPoint.is('md');"
    ],
    "lineNumber": 111,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True when window is in the scope. False when window is not in the scope."
    },
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 83,
    "kind": "file",
    "name": "src/utilities/getJquery.js",
    "content": "/**\n * Get jQuery from window.\n * Must use this way to get jQuery if we want to attach something to bootstrap's event.\n * @example\n * bse.utilities.getJquery().then(($)=>{console.log($)});\n * @return {Promise<Object, MyError>} Promise with jQuery from window.\n */\nexport default function getJquery() {\n  return new Promise((resolve, reject) => {\n    let $$;\n    if (window.$) {\n      $$ = window.$;\n    } else if (window.jQuery) {\n      $$ = window.jQuery;\n    } else {\n      console.error('Please make sure you loaded jQuery and added it to the window object');\n      reject(new Error('Please make sure you loaded jQuery and added it to the window object'));\n    }\n    resolve($$);\n  });\n}\n",
    "static": true,
    "longname": "C:/Max/selflearn/npm/bootstrap-enhancement/src/utilities/getJquery.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 84,
    "kind": "function",
    "name": "getJquery",
    "memberof": "src/utilities/getJquery.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities/getJquery.js~getJquery",
    "access": "public",
    "export": true,
    "importPath": "bootstrap-enhancement/src/utilities/getJquery.js",
    "importStyle": "getJquery",
    "description": "Get jQuery from window.\nMust use this way to get jQuery if we want to attach something to bootstrap's event.",
    "examples": [
      "bse.utilities.getJquery().then(($)=>{console.log($)});"
    ],
    "lineNumber": 8,
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object, MyError>"
      ],
      "spread": false,
      "description": "Promise with jQuery from window."
    },
    "params": []
  },
  {
    "__docId__": 85,
    "kind": "file",
    "name": "src/utilities/getScrollBarWidth.js",
    "content": "/**\n * Get scroll bar's width.\n * @example\n * const scrollBarWidth = bse.utilities.getScrollBarWidth();\n * @return {number} Page's scroll bar width even if there is no scroll bar.\n * Return 0 if scroll bar is transparent(Eg: Safari on iPhone/iPad).\n */\nexport default function getScrollBarWidth() {\n  const inner = document.createElement('p');\n  inner.style.width = '100%';\n  inner.style.height = '200px';\n\n  const outer = document.createElement('div');\n  outer.style.position = 'absolute';\n  outer.style.top = '0px';\n  outer.style.left = '0px';\n  outer.style.visibility = 'hidden';\n  outer.style.width = '200px';\n  outer.style.height = '150px';\n  outer.style.overflow = 'hidden';\n  outer.appendChild(inner);\n\n  document.body.appendChild(outer);\n  const w1 = inner.offsetWidth;\n  outer.style.overflow = 'scroll';\n  let w2 = inner.offsetWidth;\n  if (w1 === w2) w2 = outer.clientWidth;\n\n  document.body.removeChild(outer);\n\n  return w1 - w2;\n}\n",
    "static": true,
    "longname": "C:/Max/selflearn/npm/bootstrap-enhancement/src/utilities/getScrollBarWidth.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "getScrollBarWidth",
    "memberof": "src/utilities/getScrollBarWidth.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities/getScrollBarWidth.js~getScrollBarWidth",
    "access": "public",
    "export": true,
    "importPath": "bootstrap-enhancement/src/utilities/getScrollBarWidth.js",
    "importStyle": "getScrollBarWidth",
    "description": "Get scroll bar's width.",
    "examples": [
      "const scrollBarWidth = bse.utilities.getScrollBarWidth();"
    ],
    "lineNumber": 8,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Page's scroll bar width even if there is no scroll bar.\nReturn 0 if scroll bar is transparent(Eg: Safari on iPhone/iPad)."
    },
    "params": []
  },
  {
    "__docId__": 87,
    "kind": "file",
    "name": "src/utilities/hasScrollBar.js",
    "content": "/**\n * Check if the current page has scroll bar.\n * @example\n * const hasScrollBar = bse.utilities.hasScrollBar();\n * @return {boolean} True if current page has scroll bar.\n * False if doesn't have scroll bar or scroll bar is transparent(Eg: Safari on iPhone/iPad).\n */\nexport default function hasScrollBar() {\n  // The Modern solution\n  if (typeof window.innerWidth === 'number') {\n    return window.innerWidth > document.documentElement.clientWidth;\n  }\n\n  // rootElem for quirksmode\n  const rootElem = document.documentElement || document.body;\n\n  // Check overflow style property on body for fauxscrollbars\n  let overflowStyle;\n\n  if (typeof rootElem.currentStyle !== 'undefined') overflowStyle = rootElem.currentStyle.overflow;\n\n  overflowStyle = overflowStyle || window.getComputedStyle(rootElem, '').overflow;\n\n  // Also need to check the Y axis overflow\n  let overflowYStyle;\n\n  if (typeof rootElem.currentStyle !== 'undefined') {\n    overflowYStyle = rootElem.currentStyle.overflowY;\n  }\n\n  overflowYStyle = overflowYStyle || window.getComputedStyle(rootElem, '').overflowY;\n\n  const contentOverflows = rootElem.scrollHeight > rootElem.clientHeight;\n  const overflowShown =\n    /^(visible|auto)$/.test(overflowStyle) || /^(visible|auto)$/.test(overflowYStyle);\n  const alwaysShowScroll = overflowStyle === 'scroll' || overflowYStyle === 'scroll';\n\n  return (contentOverflows && overflowShown) || alwaysShowScroll;\n}\n",
    "static": true,
    "longname": "C:/Max/selflearn/npm/bootstrap-enhancement/src/utilities/hasScrollBar.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "hasScrollBar",
    "memberof": "src/utilities/hasScrollBar.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities/hasScrollBar.js~hasScrollBar",
    "access": "public",
    "export": true,
    "importPath": "bootstrap-enhancement/src/utilities/hasScrollBar.js",
    "importStyle": "hasScrollBar",
    "description": "Check if the current page has scroll bar.",
    "examples": [
      "const hasScrollBar = bse.utilities.hasScrollBar();"
    ],
    "lineNumber": 8,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if current page has scroll bar.\nFalse if doesn't have scroll bar or scroll bar is transparent(Eg: Safari on iPhone/iPad)."
    },
    "params": []
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "src/utilities/index.js",
    "content": "import prependClass from './prependClass';\nimport getJquery from './getJquery';\nimport hasScrollBar from './hasScrollBar';\nimport getScrollBarWidth from './getScrollBarWidth';\nimport addStyles from './addStyles';\nimport * as checkBreakPoint from './checkBreakPoint/index';\nimport addToWindow from './addToWindow';\n\nexport {\n  prependClass,\n  getJquery,\n  hasScrollBar,\n  getScrollBarWidth,\n  addStyles,\n  checkBreakPoint,\n  addToWindow,\n};\n",
    "static": true,
    "longname": "C:/Max/selflearn/npm/bootstrap-enhancement/src/utilities/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "src/utilities/prependClass.js",
    "content": "import getJquery from './../utilities/getJquery';\n\n/**\n * Add class names to the left most position to avoid overwriting original class's style\n * @example\n * bse.utilities.prependClass(domElement, 'test-class');\n * @param {Object} sel - Dom element that you want to add class to.\n * @param {string} strClass - Class name that you want add.\n */\nexport default function prependClass(sel, strClass) {\n  getJquery().then(($) => {\n    const $el = $(sel);\n\n    /* prepend class */\n    let classes = $el.attr('class') ? $el.attr('class') : '';\n    classes = `${strClass} ${classes}`;\n    $el.attr('class', classes);\n  });\n}\n",
    "static": true,
    "longname": "C:/Max/selflearn/npm/bootstrap-enhancement/src/utilities/prependClass.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "prependClass",
    "memberof": "src/utilities/prependClass.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities/prependClass.js~prependClass",
    "access": "public",
    "export": true,
    "importPath": "bootstrap-enhancement/src/utilities/prependClass.js",
    "importStyle": "prependClass",
    "description": "Add class names to the left most position to avoid overwriting original class's style",
    "examples": [
      "bse.utilities.prependClass(domElement, 'test-class');"
    ],
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "sel",
        "description": "Dom element that you want to add class to."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "strClass",
        "description": "Class name that you want add."
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "# bootstrap-enhancement\r\n\r\n[![NPM Version][npm-image]][npm-url]\r\n[![License Stats][npm-license]][npm-url]\r\n[![Downloads Stats][npm-downloads]][npm-url]\r\n[![Github stars][github-stars]][github-url]\r\n[![Github issues][github-issues]][github-issues-url]\r\n<!-- [![Build Status][travis-image]][travis-url] -->\r\n\r\n> Bar chart annotation for Chart.js\r\n\r\n[![nodei.co][npm-io]][npm-url]\r\n\r\n## Installation\r\n\r\n```sh\r\nnpm install bootstrap-enhancement --save\r\n```\r\n\r\nOr\r\n\r\n```sh\r\n<script src=\"https://unpkg.com/bootstrap-enhancement\"></script>\r\n```\r\n\r\n## Usage example\r\n\r\n```sh\r\nconst testEle = document.getElementById('testDom');\r\nbse.utilities.prependClass(testEle, 'text-success');\r\n```\r\n\r\n![](https://rawgit.com/nerdmax/bootstrap-enhancement/master/samples/utilities/prependClass.gif)\r\n\r\n```sh\r\nbse.utilities.getJquery().then((jQueryFromWindow) => {\r\n  console.log(jQueryFromWindow);\r\n});\r\n```\r\n\r\n![](https://rawgit.com/nerdmax/bootstrap-enhancement/master/samples/utilities/getJquery.gif)\r\n\r\n```sh\r\nalert(bse.utilities.hasScrollBar());\r\n```\r\n\r\n![](https://rawgit.com/nerdmax/bootstrap-enhancement/master/samples/utilities/hasScrollBar.gif)\r\n\r\n```sh\r\nconsole.log(bse.utilities.getScrollBarWidth());\r\n```\r\n\r\n![](https://rawgit.com/nerdmax/bootstrap-enhancement/master/samples/utilities/getScrollBarWidth.gif)\r\n\r\n```sh\r\nbse.utilities.addStyles(`\r\n  .test{color: red}\r\n`);\r\n```\r\n\r\n![](https://rawgit.com/nerdmax/bootstrap-enhancement/master/samples/utilities/addStyles.gif)\r\n\r\n```sh\r\n$('#checkSize').on('click', () => {\r\n  console.log(bse.utilities.checkBreakPoint.checkSize());\r\n});\r\n$('#is').on('click', () => {\r\n  console.log(bse.utilities.checkBreakPoint.is('>md'));\r\n});\r\n```\r\n\r\n![](https://rawgit.com/nerdmax/bootstrap-enhancement/master/samples/utilities/checkBreakPoint.gif)\r\n\r\n```sh\r\nbse.utilities.addToWindow('test', { name: 'testObject' });\r\n```\r\n\r\n![](https://rawgit.com/nerdmax/bootstrap-enhancement/master/samples/utilities/addToWindow.gif)\r\n\r\n```sh\r\n$('#addScrollMessToResTableInit').on('click', () => {\r\n  bse.addScrollMessToResTable.init();\r\n});\r\n$('#addScrollMessToResTableUpdate').on('click', () => {\r\n  bse.addScrollMessToResTable.update();\r\n});\r\n```\r\n\r\n![](https://rawgit.com/nerdmax/bootstrap-enhancement/master/samples/addScrollMessToResTable.gif)\r\n\r\n```sh\r\n$('#scrollToTopInit').on('click', () => {\r\n  bse.scrollToTop.init('<p class=\"text-danger\">SCROLL TO TOP</p>');\r\n});\r\n```\r\n\r\n![](https://rawgit.com/nerdmax/bootstrap-enhancement/master/samples/scrollToTop.gif)\r\n\r\n```sh\r\n$('#resListInit').on('click', () => {\r\n  bse.resList.init();\r\n});\r\n```\r\n\r\n![](https://rawgit.com/nerdmax/bootstrap-enhancement/master/samples/resList.gif)\r\n\r\n_For more examples and usage, please refer to the [Documentation](https://nerdmax.github.io/bootstrap-enhancement/)._\r\n\r\n## Development setup\r\n\r\n```sh\r\ngit clone git@github.com:nerdmax/bootstrap-enhancement.git\r\ncd bootstrap-enhancement\r\nnpm install\r\n```\r\n\r\n## Release History\r\n\r\n\r\n\r\n## Meta\r\n\r\nMax LIU – [My personal website](#) – mrliucan@foxmail.com\r\n\r\n\r\n## Contributing\r\n\r\n1. Fork it (<https://github.com/nerdmax/bootstrap-enhancement/fork>)\r\n2. Create your feature branch (`git checkout -b feature/fooBar`)\r\n3. Commit your changes (`git commit -am 'Add some fooBar'`)\r\n4. Push to the branch (`git push origin feature/fooBar`)\r\n5. Create a new Pull Request\r\n\r\n<!-- Markdown link & img dfn's -->\r\n[npm-image]: https://img.shields.io/npm/v/bootstrap-enhancement.svg?style=flat-square\r\n[npm-url]: https://www.npmjs.com/package/bootstrap-enhancement\r\n[npm-license]: https://img.shields.io/npm/l/bootstrap-enhancement.svg\r\n[npm-downloads]: https://img.shields.io/npm/dm/bootstrap-enhancement.svg?style=flat-square\r\n[github-url]: https://github.com/nerdmax/bootstrap-enhancement\r\n[github-issues]: https://img.shields.io/github/issues/nerdmax/bootstrap-enhancement.svg\r\n[github-issues-url]: https://github.com/nerdmax/bootstrap-enhancement/issues\r\n[github-stars]: https://img.shields.io/github/stars/nerdmax/bootstrap-enhancement.svg\r\n[travis-image]: https://img.shields.io/travis/dbader/node-bootstrap-enhancement/master.svg?style=flat-square\r\n[travis-url]: https://travis-ci.org/dbader/node-bootstrap-enhancement\r\n[npm-io]: https://nodei.co/npm/bootstrap-enhancement.png?downloads=true&downloadRank=true&stars=true\r\n[wiki]: https://github.com/nerdmax/bootstrap-enhancement/wiki\r\n",
    "longname": "C:\\Max\\selflearn\\npm\\bootstrap-enhancement\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"bootstrap-enhancement\",\n  \"version\": \"1.10.7\",\n  \"description\": \"\",\n  \"main\": \"dist/bootstrap-enhancement.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"webpack --config webpack.dev.js\",\n    \"samples\": \"webpack-dev-server --config webpack.samples.js --open\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"babel-core\": \"^6.26.3\",\n    \"babel-eslint\": \"^8.2.3\",\n    \"babel-loader\": \"^7.1.4\",\n    \"babel-preset-env\": \"^1.7.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^4.19.1\",\n    \"eslint-config-airbnb\": \"^16.1.0\",\n    \"eslint-plugin-import\": \"^2.11.0\",\n    \"eslint-plugin-jsx-a11y\": \"^6.0.3\",\n    \"eslint-plugin-react\": \"^7.7.0\",\n    \"uglifyjs-webpack-plugin\": \"^1.2.5\",\n    \"webpack\": \"^4.9.1\",\n    \"webpack-cli\": \"^2.1.4\",\n    \"webpack-dev-server\": \"^3.1.4\",\n    \"webpack-merge\": \"^4.1.2\"\n  }\n}\n",
    "longname": "C:\\Max\\selflearn\\npm\\bootstrap-enhancement\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]